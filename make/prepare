#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import print_function, unicode_literals # We require Python 2.6 or later
from string import Template
import random
import string
import os
import sys
import argparse
import subprocess
import shutil
from io import open

if sys.version_info[:3][0] == 2:
    import ConfigParser as ConfigParser
    import StringIO as StringIO

if sys.version_info[:3][0] == 3:
    import configparser as ConfigParser
    import io as StringIO

base_dir = os.path.dirname(__file__)
config_dir = os.path.join(base_dir, "config")
templates_dir = os.path.join(base_dir, "templates")

def prep_conf_dir(root, name):
    absolute_path = os.path.join(root, name)
    if not os.path.exists(absolute_path):
        os.makedirs(absolute_path)
    return absolute_path

def render(src, dest, **kw):
    t = Template(open(src, 'r').read())
    with open(dest, 'w') as f:
        f.write(t.substitute(**kw))
    print("Generated configuration file: %s" % dest)

def get_secret_key(path):
    secret_key = _get_secret(path, "secretkey") 
    if len(secret_key) != 16:
        raise Exception("secret key's length has to be 16 chars, current length: %d" % len(secret_key))
    return secret_key

def _get_secret(folder, filename, length=16):
    key_file = os.path.join(folder, filename)
    if os.path.isfile(key_file):
        with open(key_file, 'r') as f:
            key = f.read()
            print("loaded secret from file: %s" % key_file)
        return key
    if not os.path.isdir(folder):
        os.makedirs(folder, mode=0600)
    key = ''.join(random.choice(string.ascii_letters+string.digits) for i in range(length))  
    with open(key_file, 'w') as f:
        f.write(key)
        print("Generated and saved secret to file: %s" % key_file)
    os.chmod(key_file, 0600)
    return key

def delfile(src):
    if os.path.isfile(src):
        try:
            os.remove(src)
            print("Clearing the configuration file: %s" % src)
        except:
            pass
    elif os.path.isdir(src):
        for item in os.listdir(src):
            itemsrc=os.path.join(src,item)
            delfile(itemsrc)

parser = argparse.ArgumentParser()
parser.add_argument('--conf', dest='cfgfile', default=base_dir+'/board.cfg',type=str,help="the path of Board configuration file")
args = parser.parse_args()

delfile(config_dir)

def render(src, dest, **kw):
    t = Template(open(src, 'r').read())
    with open(dest, 'w') as f:
        f.write(t.substitute(**kw))
    print("Generated configuration file: %s" % dest)

#Read Configurations
conf = StringIO.StringIO()
conf.write("[configuration]\n")
conf.write(open(args.cfgfile).read())
conf.seek(0, os.SEEK_SET)
rcp = ConfigParser.RawConfigParser()
rcp.readfp(conf)

hostname = rcp.get("configuration", "hostname")
board_admin_password = rcp.get("configuration", "board_admin_password")
db_password = rcp.get("configuration", "db_password")
secretkey_path = rcp.get("configuration", "secretkey_path")
secret_key = get_secret_key(secretkey_path)
########

#Setting Directory
apiserver_config_dir = os.path.join(config_dir,"apiserver")
if not os.path.exists(apiserver_config_dir):
    os.makedirs(os.path.join(config_dir, "apiserver"))
apiserver_conf_env = os.path.join(config_dir, "apiserver", "env")

tokenserver_config_dir = os.path.join(config_dir,"tokenserver")
if not os.path.exists(tokenserver_config_dir):
    os.makedirs(os.path.join(config_dir, "tokenserver"))
tokenserver_conf_env = os.path.join(config_dir, "tokenserver", "env")

db_config_dir = os.path.join(config_dir, "db")
if not os.path.exists(db_config_dir):
    os.makedirs(os.path.join(config_dir, "db"))
db_conf_env = os.path.join(config_dir, "db", "env")

nginx_conf = os.path.join(config_dir, "nginx", "nginx.conf")
nginx_config_dir = os.path.join(config_dir, "nginx")
if not os.path.exists(nginx_config_dir):
    os.makedirs(os.path.join(config_dir, "nginx"))


#Render Configure File
render(os.path.join(templates_dir, "apiserver", "env"),
        apiserver_conf_env,
        hostname=hostname,
        db_password=db_password,
        board_admin_password=board_admin_password)

render(os.path.join(templates_dir, "db", "env"),
        db_conf_env,
        db_password=db_password)

render(os.path.join(templates_dir, "nginx", "nginx.http.conf"), 
        nginx_conf)

print("The configuration files are ready, please use docker-compose to start the service.")
