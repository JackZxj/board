#!/usr/bin/python
# -*- coding: utf-8 -*-
from __future__ import print_function, unicode_literals # We require Python 2.6 or later
from string import Template
import random
import string
import os
import sys
import argparse
import subprocess
import shutil
from io import open

if sys.version_info[:3][0] == 2:
    import ConfigParser as ConfigParser
    import StringIO as StringIO

if sys.version_info[:3][0] == 3:
    import configparser as ConfigParser
    import io as StringIO

base_dir = os.path.dirname(__file__)
config_dir = os.path.join(base_dir, "config")
templates_dir = os.path.join(base_dir, "templates")

def prep_conf_dir(root, name):
    absolute_path = os.path.join(root, name)
    if not os.path.exists(absolute_path):
        os.makedirs(absolute_path)
    return absolute_path

def render(src, dest, **kw):
    t = Template(open(src, 'r').read())
    with open(dest, 'w') as f:
        f.write(t.substitute(**kw))
    print("Generated configuration file: %s" % dest)

def delfile(src):
    if os.path.isfile(src):
        try:
            os.remove(src)
            print("Clearing the configuration file: %s" % src)
        except:
            pass
    elif os.path.isdir(src):
        for item in os.listdir(src):
            itemsrc=os.path.join(src,item)
            delfile(itemsrc)

parser = argparse.ArgumentParser()
parser.add_argument('--conf', dest='cfgfile', default=base_dir+'/board.cfg',type=str,help="the path of Board configuration file")
args = parser.parse_args()

delfile(config_dir)

def render(src, dest, **kw):
    t = Template(open(src, 'r').read())
    with open(dest, 'w') as f:
        f.write(t.substitute(**kw))
    print("Generated configuration file: %s" % dest)

FNULL = open(os.devnull, 'w')

def generate_ssh_key_pairs(dest_path=os.path.join(config_dir,'ssh_keys')):
    if not os.path.exists(dest_path):
        os.makedirs(dest_path)
    rc = subprocess.call(["ssh-keygen", "-t", "rsa", "-f", os.path.join(dest_path, "id_rsa"), "-q", "-N", ""], stdout=FNULL, stderr=subprocess.STDOUT)
    if rc != 0:
        return rc
generate_ssh_key_pairs()


#Read Configurations
conf = StringIO.StringIO()
conf.write("[configuration]\n")
conf.write(open(args.cfgfile).read())
conf.seek(0, os.SEEK_SET)
rcp = ConfigParser.RawConfigParser()
rcp.readfp(conf)

hostname = rcp.get("configuration", "hostname")
kube_master_ip = rcp.get("configuration", "kube_master_ip")
kube_master_port = rcp.get("configuration", "kube_master_port")
mysql_ip = rcp.get("configuration", "mysql_ip")
mysql_port = rcp.get("configuration", "mysql_port")
board_admin_password = rcp.get("configuration", "board_admin_password")
db_password = rcp.get("configuration", "db_password")
token_cache_expire_seconds = rcp.get("configuration", "token_cache_expire_seconds")
token_expire_seconds = rcp.get("configuration", "token_expire_seconds")
registry_ip = rcp.get("configuration", "registry_ip")
registry_port = rcp.get("configuration", "registry_port")

auth_mode = rcp.get("configuration", "auth_mode")
verification_url = rcp.get("configuration", "verification_url")
redirection_url = rcp.get("configuration", "redirection_url")

###ldap configuration
ldap_url = rcp.get("configuration", "ldap_url")
# this two options are either both set or unset
if rcp.has_option("configuration", "ldap_searchdn"):
    ldap_searchdn = rcp.get("configuration", "ldap_searchdn")
    ldap_search_pwd = rcp.get("configuration", "ldap_search_pwd")
else:
    ldap_searchdn = ""
    ldap_search_pwd = ""
ldap_basedn = rcp.get("configuration", "ldap_basedn")
# ldap_filter is null by default
if rcp.has_option("configuration", "ldap_filter"):
    ldap_filter = rcp.get("configuration", "ldap_filter")
else:
    ldap_filter = ""
ldap_uid = rcp.get("configuration", "ldap_uid")
ldap_scope = rcp.get("configuration", "ldap_scope")
ldap_timeout = rcp.get("configuration", "ldap_timeout")


########

#Setting Directory
apiserver_config_dir = os.path.join(config_dir,"apiserver")
if not os.path.exists(apiserver_config_dir):
    os.makedirs(os.path.join(config_dir, "apiserver"))
apiserver_conf= os.path.join(config_dir, "apiserver", "app.conf")
apiserver_env= os.path.join(config_dir, "apiserver", "env")

tokenserver_config_dir = os.path.join(config_dir,"tokenserver")
if not os.path.exists(tokenserver_config_dir):
    os.makedirs(os.path.join(config_dir, "tokenserver"))
tokenserver_conf = os.path.join(config_dir, "tokenserver", "app.conf")
tokenserver_env = os.path.join(config_dir, "tokenserver", "env")

collector_config_dir = os.path.join(config_dir,"collector")
if not os.path.exists(collector_config_dir):
    os.makedirs(os.path.join(config_dir, "collector"))
collector_conf_env = os.path.join(config_dir, "collector", "env")

db_config_dir = os.path.join(config_dir, "db")
if not os.path.exists(db_config_dir):
    os.makedirs(os.path.join(config_dir, "db"))
db_conf_env = os.path.join(config_dir, "db", "env")

nginx_conf = os.path.join(config_dir, "nginx", "nginx.conf")
nginx_config_dir = os.path.join(config_dir, "nginx")
if not os.path.exists(nginx_config_dir):
    os.makedirs(os.path.join(config_dir, "nginx"))

jenkins_config_dir = os.path.join(config_dir, "jenkins")
if not os.path.exists(jenkins_config_dir):
    os.makedirs(os.path.join(config_dir, "jenkins"))
jenkins_env = os.path.join(config_dir, "jenkins", "env")


#Render Configure File
render(os.path.join(templates_dir, "apiserver", "app.conf"),
        apiserver_conf,
        token_cache_expire_seconds=token_cache_expire_seconds,
        db_password=db_password)

render(os.path.join(templates_dir, "apiserver", "env"),
        apiserver_env,
        hostname=hostname,
        board_admin_password=board_admin_password,
        kube_master_ip=kube_master_ip,
        kube_master_port=kube_master_port,
        registry_ip=registry_ip,
        registry_port=registry_port,
        auth_mode=auth_mode,
        ldap_url=ldap_url,
        ldap_searchdn =ldap_searchdn, 
        ldap_search_pwd =ldap_search_pwd,
        ldap_basedn=ldap_basedn,
        ldap_filter=ldap_filter,
        ldap_uid=ldap_uid,
        ldap_scope=ldap_scope,
        ldap_timeout=ldap_timeout,
        verification_url=verification_url,
        redirection_url=redirection_url)

render(os.path.join(templates_dir, "tokenserver", "app.conf"),
        tokenserver_conf,
        token_expire_seconds=token_expire_seconds)

render(os.path.join(templates_dir, "tokenserver", "env"),
        tokenserver_env)

render(os.path.join(templates_dir, "collector", "env"),
        collector_conf_env,
        kube_master_ip=kube_master_ip,
        kube_master_port=kube_master_port,
        mysql_ip=mysql_ip,
        mysql_port=mysql_port,
        db_password=db_password)

render(os.path.join(templates_dir, "db", "env"),
        db_conf_env,
        db_password=db_password)

render(os.path.join(templates_dir, "nginx", "nginx.http.conf"),
        nginx_conf)

render(os.path.join(templates_dir, "jenkins", "env"),
        jenkins_env,
        registry_ip=registry_ip,
        registry_port=registry_port)

print("The configuration files are ready, please use docker-compose to start the service.")
