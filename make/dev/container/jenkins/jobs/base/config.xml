<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>F00</name>
          <description></description>
          <defaultValue>temporaryProject</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.67">
      <scriptText>def jobName = binding.variables.get(&quot;F00&quot;)
pipelineJob(jobName) {
  triggers {
    genericTrigger {
      genericVariables {
        genericVariable {
          key(&quot;repo_name&quot;)
          value(&quot;\$.repository.name&quot;)
          expressionType(&quot;JSONPath&quot;)
          regexpFilter(&quot;&quot;)
          defaultValue(&quot;library&quot;)
        }
        genericVariable {
          key(&quot;base_repo_url&quot;)
          value(&quot;\$.repository.clone_url&quot;)
          expressionType(&quot;JSONPath&quot;)
          regexpFilter(&quot;&quot;)
          defaultValue(&quot;&quot;)
        }
        genericVariable {
          key(&quot;user_name&quot;)
          value(&quot;\$.repository.owner.username&quot;)
          expressionType(&quot;JSONPath&quot;)
          regexpFilter(&quot;&quot;)
          defaultValue(&quot;admin&quot;)
        }
      }
      genericRequestVariables {
        genericRequestVariable {
          key(&quot;access_token&quot;)
          regexpFilter(&quot;&quot;)
        }
      }
      printContributedVariables(true)
      printPostContent(true)
      regexpFilterText(&quot;\$repo_name&quot;)
      regexpFilterExpression(&quot;^(${jobName})\$&quot;)
    }
  }
  definition {
    cps {
      script(&quot;node {\n dir(&apos;./&apos;) {\n stage(&apos;cleanEnv&apos;) {\n \tsh &apos;rm -rf \$WORKSPACE/\$user_name/*&apos;\n }\n stage(&apos;Git&apos;) {\n \tsh &apos;&apos;&apos;\n\t echo \$base_repo_url\n\t echo \$repo_name\n\t echo \$user_name\n\t if [ ! -d \$WORKSPACE/\$user_name ]; then\n\t mkdir -p \$WORKSPACE/\$user_name\n\t fi\n\t cd \$WORKSPACE/\$user_name\n\t git clone \$base_repo_url\n\t &apos;&apos;&apos;\n }\n stage(&apos;jekins&apos;) {\n\t sh &apos;&apos;&apos;\n\t PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin\n\t chmod +x \$WORKSPACE/\$user_name/\$repo_name/parser.py\n\t python \$WORKSPACE/\$user_name/\$repo_name/parser.py \$base_repo_url \$WORKSPACE \$BUILD_ID \$repo_name \$user_name\n\t &apos;&apos;&apos;\n\t }\n }\n }\n&quot;)
      sandbox(true)
    }
  }
  
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>