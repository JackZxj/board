<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>F00</name>
          <description></description>
          <defaultValue>temporaryProject</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>F01</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>F02</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>F03</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.67">
      <scriptText>def jobName = binding.variables.get(&quot;F00&quot;)
def repoURL = binding.variables.get(&quot;F01&quot;)
def repoUsername = binding.variables.get(&quot;F02&quot;)
def repoUserEmail = binding.variables.get(&quot;F03&quot;)
freeStyleJob(jobName) {
  label(&quot;slave&quot;)
  triggers {
    genericTrigger {
      genericVariables {
        genericVariable {
          key(&quot;repo_name&quot;)
          value(&quot;\$.repository.name&quot;)
          expressionType(&quot;JSONPath&quot;)
          regexpFilter(&quot;&quot;)
          defaultValue(&quot;&quot;)
        }
        genericVariable {
          key(&quot;base_repo_url&quot;)
          value(&quot;\$.repository.clone_url&quot;)
          expressionType(&quot;JSONPath&quot;)
          regexpFilter(&quot;&quot;)
          defaultValue(&quot;&quot;)
        }
        genericVariable {
          key(&quot;user_name&quot;)
          value(&quot;\$.repository.owner.username&quot;)
          expressionType(&quot;JSONPath&quot;)
          regexpFilter(&quot;&quot;)
          defaultValue(&quot;&quot;)
        }
      }
      printContributedVariables(true)
      printPostContent(true)
      regexpFilterText(&quot;\$repo_name&quot;)
      regexpFilterExpression(&quot;^(${jobName})\$&quot;)
    }
  }
  scm {
    git(repoURL, &apos;master&apos;) { node -&gt;
       node / gitConfigName(repoUsername)
       node / gitConfigEmail(repoUserEmail)
    }
  }
  configure { project -&gt; 
    project / builders &lt;&lt; &apos;ruby-proxy-object&apos; {
      &apos;ruby-object&apos; (&apos;ruby-class&apos;: &apos;Jenkins::Tasks::BuilderProxy&apos;, &apos;pluginid&apos;: &apos;travis-yml&apos;) {
        &apos;object&apos; (&apos;ruby-class&apos;: &apos;TravisYmlBuilder&apos;, &apos;pluginid&apos;: &apos;travis-yml&apos;)
        &apos;pluginid&apos; (&apos;pluginid&apos;: &apos;travis-yml&apos;, &apos;ruby-class&apos;: &apos;String&apos;, &apos;travis-yml&apos;)
      }
    }
  }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>