swagger: "2.0"
info:
  title: Admin server API
  description: Admin server API
  version: 1.0.0
  termsOfService: http://beego.me/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1/admin
paths:
  /account/ValidateUUID:
    post:
      tags:
      - account
      description: validate the UUID
      operationId: AccController.ValidateUUID
      parameters:
      - in: body
        name: body
        description: UUID
        required: true
        schema:
          $ref: '#/definitions/models.UUID'
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
  /account/createUUID:
    post:
      tags:
      - account
      description: create UUID
      operationId: AccController.CreateUUID
      responses:
        "200":
          description: success
        "400":
          description: bad request
  /account/initialize:
    post:
      tags:
      - account
      description: initialize username and password
      operationId: AccController.Initialize
      parameters:
      - in: body
        name: body
        description: body for user account
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
        "400":
          description: bad request
  /account/install:
    get:
      tags:
      - account
      description: judge if it's the first time open admin server.
      operationId: AccController.Install
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
  /account/login:
    post:
      tags:
      - account
      description: Logs user into the system
      operationId: AccController.Login
      parameters:
      - in: body
        name: body
        description: body for user account
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
  /account/verify:
    post:
      tags:
      - account
      description: verify input password
      operationId: AccController.Verify
      parameters:
      - in: body
        name: body
        description: The password
        required: true
        schema:
          $ref: '#/definitions/models.Password'
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
  /board/applycfg:
    post:
      tags:
      - board
      description: apply cfg and restart Board
      operationId: BoardController.Applycfg
      parameters:
      - in: query
        name: token
        description: token
        required: true
        type: string
      - in: body
        name: body
        description: body for host acc info
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
        "400":
          description: bad request
        "401":
          description: unauthorized
  /board/restart:
    post:
      tags:
      - board
      description: restart Board
      operationId: BoardController.Restart
      parameters:
      - in: query
        name: token
        description: token
        required: true
        type: string
      - in: body
        name: body
        description: body for host acc info
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
        "400":
          description: bad request
        "401":
          description: unauthorized
  /board/shutdown:
    post:
      tags:
      - board
      description: shutdown board
      operationId: BoardController.Shutdown
      parameters:
      - in: query
        name: token
        description: token
        required: true
        type: string
      - in: body
        name: body
        description: body for host acc info
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
        "400":
          description: bad request
        "401":
          description: unauthorized
  /boot/checkdb:
    get:
      tags:
      - boot
      description: Check db status
      operationId: BootController.CheckDB
      responses:
        "200":
          description: success
        "400":
          description: bad request
  /boot/initdb:
    post:
      tags:
      - boot
      description: init db password and max number of connections.
      operationId: BootController.Initdb
      parameters:
      - in: body
        name: body
        description: body for db conf
        required: true
        schema:
          $ref: '#/definitions/models.DBconf'
      responses:
        "200":
          description: success
        "400":
          description: bad request
  /boot/startboard:
    post:
      tags:
      - boot
      description: ssh to host and docker-compose up the Board
      operationId: BootController.StartBoard
      parameters:
      - in: query
        name: token
        description: token
        required: true
        type: string
      - in: body
        name: body
        description: body for host acc info
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
        "400":
          description: bad request
        "401":
          description: unauthorized
  /boot/startdb:
    post:
      tags:
      - boot
      description: ssh to host and docker-compose up the db
      operationId: BootController.Startdb
      parameters:
      - in: body
        name: body
        description: body for host acc info
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      responses:
        "200":
          description: success
        "400":
          description: bad request
  /configuration/:
    get:
      tags:
      - configuration
      description: return all cfg parameters
      operationId: CfgController.GetAll
      parameters:
      - in: query
        name: which
        description: which file to get
        type: string
      - in: query
        name: token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/models.Configuration'
        "400":
          description: bad request
        "401":
          description: unauthorized
    post:
      tags:
      - configuration
      description: update cfg
      operationId: CfgController.Post
      parameters:
      - in: body
        name: body
        description: parameters
        required: true
        schema:
          $ref: '#/definitions/models.Configuration'
      - in: query
        name: token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: success
        "400":
          description: bad request
        "401":
          description: unauthorized
  /configuration/pubkey:
    get:
      tags:
      - configuration
      description: return public key
      operationId: CfgController.GetKey
      parameters:
      - in: query
        name: token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
        "401":
          description: unauthorized
  /monitor/:
    get:
      tags:
      - monitor
      description: monitor Board module containers
      operationId: MoniController.Get
      parameters:
      - in: query
        name: token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Boardinfo'
        "400":
          description: bad request
        "401":
          description: unauthorized
  /node/:
    get:
      tags:
      - node
      description: Get node list
      operationId: Controller.Get node list
      responses:
        "200":
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/nodeModel.NodeStatus'
        "400":
          description: bad request
        "500":
          description: Internal Server Error
    post:
      tags:
      - node
      description: Get add nodeModel
      operationId: Controller.add nodeModel
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/nodeModel.AddNodePostData'
      responses:
        "200":
          description: ""
        "400":
          description: bad request
        "500":
          description: Internal Server Error
    delete:
      tags:
      - node
      description: remove node
      operationId: Controller.remove node
      parameters:
      - in: query
        name: node_ip
        description: "true"
        type: string
      - in: query
        name: node_password
        description: "true"
        type: string
      - in: query
        name: host_password
        description: "true"
        type: string
      - in: query
        name: host_username
        description: root
        required: true
        type: string
      - in: query
        name: master_password
        description: "true"
        type: string
      responses:
        "200":
          description: ""
        "400":
          description: bad request
        "500":
          description: Internal Server Error
  /node/callback:
    put:
      tags:
      - node
      description: Update node log
      operationId: Controller.Update node log
      parameters:
      - in: body
        name: body
        description: "true"
        schema:
          $ref: '#/definitions/nodeModel.UpdateNodeLog'
      responses:
        "200":
          description: ""
        "400":
          description: bad request
        "500":
          description: Internal Server Error
  /node/log:
    get:
      tags:
      - node
      description: Get detail of history log info
      operationId: Controller.Get detail of history log info
      parameters:
      - in: query
        name: node_ip
        description: "true"
        type: string
      - in: query
        name: creation_time
        description: "true"
        type: string
      responses:
        "200":
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/nodeModel.NodeLogDetail'
        "400":
          description: bad request
        "500":
          description: Internal Server Error
    delete:
      tags:
      - node
      description: Delete node log info from node_log table and node_log_detail_info
        table
      operationId: Controller.Delete node log
      parameters:
      - in: query
        name: creation_time
        description: "true"
        type: string
      responses:
        "200":
          description: success
        "400":
          description: bad request
        "500":
          description: Internal Server Error
  /node/logs:
    get:
      tags:
      - node
      description: Get node log list
      operationId: Controller.Get node log list
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/nodeModel.PaginatedNodeLogList'
        "400":
          description: bad request
        "500":
          description: Internal Server Error
  /node/preparation:
    get:
      tags:
      - node
      description: get preparation data
      operationId: Controller.get preparation data
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/nodeModel.PreparationData'
        "400":
          description: bad request
        "500":
          description: Internal Server Error
definitions:
  3229.<nil>.NodeLog:
    title: NodeLog
    type: object
  models.Account:
    title: Account
    type: object
    properties:
      id:
        type: integer
        format: int64
      password:
        type: string
      username:
        type: string
  models.Apiserver:
    title: Apiserver
    type: object
    properties:
      api_server_port:
        type: string
      hostname:
        type: string
      image_baseline_time:
        type: string
      kube_http_scheme:
        type: string
      kube_master_ip:
        type: string
      kube_master_port:
        type: string
      registry_ip:
        type: string
      registry_port:
        type: string
  models.Boardinfo:
    title: Boardinfo
    type: object
    properties:
      block_io:
        type: string
      cpu_perc:
        type: string
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      mem_perc:
        type: string
      mem_usage:
        type: string
      name:
        type: string
      net_io:
        type: string
      pids:
        type: string
      ports:
        type: string
      status:
        type: string
  models.Configuration:
    title: Configuration
    type: object
    properties:
      Apiserver:
        $ref: '#/definitions/models.Apiserver'
      Email:
        $ref: '#/definitions/models.Email'
      Gogitserver:
        $ref: '#/definitions/models.Gogitserver'
      Jenkinsserver:
        $ref: '#/definitions/models.Jenkinsserver'
      Kvm:
        $ref: '#/definitions/models.Kvm'
      Ldap:
        $ref: '#/definitions/models.Ldap'
      Other:
        $ref: '#/definitions/models.Other'
      current:
        type: string
      first_time_post:
        type: boolean
      tmp_exist:
        type: boolean
  models.DBconf:
    title: DBconf
    type: object
    properties:
      db_max_connections:
        type: integer
        format: int64
      db_password:
        type: string
  models.Email:
    title: Email
    type: object
    properties:
      email_from:
        type: string
      email_identity:
        type: string
      email_password:
        type: string
      email_server:
        type: string
      email_server_port:
        type: string
      email_ssl:
        type: string
      email_username:
        type: string
  models.Gogitserver:
    title: Gogitserver
    type: object
    properties:
      gogits_host_ip:
        type: string
      gogits_host_port:
        type: string
      gogits_ssh_port:
        type: string
  models.Jenkinsserver:
    title: Jenkinsserver
    type: object
    properties:
      jenkins_execution_mode:
        type: string
      jenkins_host_ip:
        type: string
      jenkins_host_port:
        type: string
      jenkins_node_ip:
        type: string
      jenkins_node_password:
        type: string
      jenkins_node_ssh_port:
        type: string
      jenkins_node_username:
        type: string
      jenkins_node_volume:
        type: string
  models.Kvm:
    title: Kvm
    type: object
    properties:
      kvm_registry_port:
        type: string
      kvm_registry_size:
        type: string
      kvm_toolkits_path:
        type: string
  models.Ldap:
    title: Ldap
    type: object
    properties:
      ldap_basedn:
        type: string
      ldap_scope:
        type: string
      ldap_timeout:
        type: string
      ldap_uid:
        type: string
      ldap_url:
        type: string
  models.Other:
    title: Other
    type: object
    properties:
      arch_type:
        type: string
      audit_debug:
        type: string
      auth_mode:
        type: string
      board_admin_password:
        type: string
      db_password:
        type: string
      dns_suffix:
        type: string
      elaseticsearch_memory_in_megabytes:
        type: string
      redirection_url:
        type: string
      tiller_port:
        type: string
      token_cache_expire_seconds:
        type: string
      token_expire_seconds:
        type: string
      verification_url:
        type: string
  models.Password:
    title: Password
    type: object
    properties:
      value:
        type: string
      which:
        type: string
  models.UUID:
    title: UUID
    type: object
    properties:
      UUID:
        type: string
  nodeModel.AddNodePostData:
    title: AddNodePostData
    type: object
    properties:
      host_password:
        type: string
      host_username:
        type: string
      master_password:
        type: string
      node_ip:
        type: string
      node_password:
        type: string
  nodeModel.NodeLogDetail:
    title: NodeLogDetail
    type: object
    properties:
      message:
        type: string
      status:
        $ref: '#/definitions/nodeModel.NodeLogResponseStatus'
  nodeModel.NodeLogResponseStatus:
    title: NodeLogResponseStatus
    format: int64
    type: integer
    enum:
    - NodeLogResponseUnKnown = 0
    - NodeLogResponseStart = 1
    - NodeLogResponseNormal = 2
    - NodeLogResponseError = 3
    - NodeLogResponseWarning = 4
    - NodeLogResponseSuccess = 5
    - NodeLogResponseFailed = 6
    example: 0
  nodeModel.NodeStatus:
    title: NodeStatus
    type: object
    properties:
      creation_time:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      ip:
        type: string
  nodeModel.PaginatedNodeLogList:
    title: PaginatedNodeLogList
    type: object
    properties:
      log_list:
        $ref: '#/definitions/3229.<nil>.NodeLog'
      pagination:
        $ref: '#/definitions/nodeModel.Pagination'
  nodeModel.Pagination:
    title: Pagination
    type: object
    properties:
      page_count:
        type: integer
        format: int64
      page_index:
        type: integer
        format: int64
      page_size:
        type: integer
        format: int64
      total_count:
        type: integer
        format: int64
  nodeModel.PreparationData:
    title: PreparationData
    type: object
    properties:
      host_ip:
        type: string
      master_ip:
        type: string
  nodeModel.UpdateNodeLog:
    title: UpdateNodeLog
    type: object
    properties:
      install_file:
        type: string
      ip:
        type: string
      log_file:
        type: string
      log_id:
        type: integer
        format: int64
      success:
        type: integer
        format: int64
tags:
- name: configuration
  description: |
    CfgController includes operations about cfg
- name: account
  description: |
    AccController includes operations about account.
- name: board
  description: |
    BoardController controlls Board up and down.
- name: monitor
  description: |
    MoniController includes operations about monitoring.
- name: boot
  description: |
    BootController includes operations about booting config.
