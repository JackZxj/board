package router

import (
	"git/inspursoft/board/src/apiserver/controller"

	"github.com/astaxie/beego"
)

func init() {
	ns := beego.NewNamespace("/api",
		beego.NSNamespace("/v1",
			beego.NSRouter("/sign-in",
				&controller.AuthController{},
				"post:SignInAction"),
			beego.NSRouter("/ext-auth",
				&controller.AuthController{},
				"get:ExternalAuthAction"),
			beego.NSRouter("/sign-up",
				&controller.AuthController{},
				"post:SignUpAction"),
			beego.NSRouter("/log-out",
				&controller.AuthController{},
				"get:LogOutAction"),
			beego.NSRouter("/user-exists",
				&controller.AuthController{},
				"get:UserExists"),
			beego.NSRouter("/users/current",
				&controller.AuthController{},
				"get:CurrentUserAction"),
			beego.NSRouter("/systeminfo",
				&controller.AuthController{},
				"get:GetSystemInfo"),
			beego.NSRouter("/users",
				&controller.UserController{},
				"get:GetUsersAction"),
			beego.NSRouter("/users/:id([0-9]+)/password",
				&controller.UserController{},
				"put:ChangePasswordAction"),
			beego.NSRouter("/users/changeaccount",
				&controller.UserController{},
				"put:ChangeUserAccount"),
			beego.NSRouter("/adduser",
				&controller.SystemAdminController{},
				"post:AddUserAction"),
			beego.NSRouter("/users/:id([0-9]+)",
				&controller.SystemAdminController{},
				"get:GetUserAction;put:UpdateUserAction;delete:DeleteUserAction"),
			beego.NSRouter("/users/:id([0-9]+)/systemadmin",
				&controller.SystemAdminController{},
				"put:ToggleSystemAdminAction"),
			beego.NSRouter("/projects",
				&controller.ProjectController{},
				"head:ProjectExists;get:GetProjectsAction;post:CreateProjectAction"),
			beego.NSRouter("/projects/:id([0-9]+)/publicity",
				&controller.ProjectController{},
				"put:ToggleProjectPublicAction"),
			beego.NSRouter("/projects/:id([0-9]+)",
				&controller.ProjectController{},
				"get:GetProjectAction;delete:DeleteProjectAction"),
			beego.NSRouter("/projects/:id([0-9]+)/members",
				&controller.ProjectMemberController{},
				"get:GetProjectMembersAction;post:AddOrUpdateProjectMemberAction"),
			beego.NSRouter("/projects/:projectId([0-9]+)/members/:userId([0-9]+)",
				&controller.ProjectMemberController{},
				"delete:DeleteProjectMemberAction"),
			beego.NSRouter("/images",
				&controller.ImageController{},
				"get:GetImagesAction;delete:DeleteImageAction"),
			beego.NSRouter("/images/:imagename(.*)",
				&controller.ImageController{},
				"get:GetImageDetailAction;delete:DeleteImageTagAction"),
			beego.NSRouter("/images/reset-temp",
				&controller.ImageController{},
				"put:ResetBuildImageTempAction"),
			beego.NSRouter("/images/building",
				&controller.ImageController{},
				"post:BuildImageAction"),
			beego.NSRouter("/images/dockerfilebuilding",
				&controller.ImageController{},
				"post:DockerfileBuildImageAction"),
			beego.NSRouter("/images/dockerfile",
				&controller.ImageController{},
				"get:GetImageDockerfileAction"),
			beego.NSRouter("/images/registry",
				&controller.ImageController{},
				"get:GetImageRegistryAction"),
			beego.NSRouter("/images/preview",
				&controller.ImageController{},
				"post:DockerfilePreviewAction"),
			beego.NSRouter("/images/configclean",
				&controller.ImageController{},
				"delete:ConfigCleanAction"),
			beego.NSRouter("/images/:imagename(.*)/existing",
				&controller.ImageController{},
				"get:CheckImageTagExistingAction"),
			beego.NSRouter("/search",
				&controller.SearchSourceController{}, "get:Search"),
			beego.NSRouter("/node",
				&controller.NodeController{}, "get:GetNode"),
			beego.NSRouter("/nodes",
				&controller.NodeController{}, "get:NodeList"),
			beego.NSRouter("/node/toggle",
				&controller.NodeController{}, "get:NodeToggle"),
			beego.NSRouter("/node/:id([0-9]+)/group",
				&controller.NodeController{},
				"get:GetGroupsOfNodeAction;post:AddNodeToGroupAction;delete:RemoveNodeFromGroupAction"),
			beego.NSRouter("/nodegroup",
				&controller.NodeGroupController{},
				"get:GetNodeGroupsAction;post:AddNodeGroupAction;delete:DeleteNodeGroupAction"),
			beego.NSRouter("/nodegroup/existing",
				&controller.NodeGroupController{},
				"get:CheckNodeGroupNameExistingAction"),
			beego.NSNamespace("/storage",
				beego.NSRouter("/setnfs", &controller.StorageController{}, "post:Storage"),
			),
			beego.NSNamespace("/dashboard", beego.NSRouter("/service",
				&controller.DashboardServiceController{},
				"post:GetServiceData"),
				beego.NSRouter("/node",
					&controller.DashboardNodeController{}, "post:GetNodeData"),
				beego.NSRouter("/data",
					&controller.Dashboard{}, "post:GetData"),
				beego.NSRouter("/time",
					&controller.DashboardServiceController{}, "get:GetServerTime"),
			),
			beego.NSRouter("/git/serve",
				&controller.GitRepoController{},
				"post:CreateServeRepo"),
			beego.NSRouter("/git/repo",
				&controller.GitRepoController{},
				"post:InitUserRepo"),
			beego.NSRouter("/git/push",
				&controller.GitRepoController{},
				"post:PushObjects"),
			beego.NSRouter("/git/pull",
				&controller.GitRepoController{},
				"post:PullObjects"),
			beego.NSRouter("/services",
				&controller.ServiceController{},
				"post:CreateServiceConfigAction;get:GetServiceListAction"),
			beego.NSRouter("/services/exists",
				&controller.ServiceController{},
				"get:ServiceExists"),
			beego.NSRouter("/services/rollingupdate/image",
				&controller.ServiceRollingUpdateController{},
				"get:GetRollingUpdateServiceImageConfigAction;patch:PatchRollingUpdateServiceImageAction"),
			beego.NSRouter("/services/rollingupdate/nodegroup",
				&controller.ServiceRollingUpdateController{},
				"get:GetRollingUpdateServiceNodeGroupConfigAction;patch:PatchRollingUpdateServiceNodeGroupAction"),
			beego.NSRouter("/services/:id([0-9]+)",
				&controller.ServiceController{},
				"delete:DeleteServiceAction"),
			beego.NSRouter("/services/deployment",
				&controller.ServiceController{},
				"post:DeployServiceAction"),
			beego.NSRouter("/services/config",
				&controller.ServiceConfigController{},
				"post:SetConfigServiceStepAction;get:GetConfigServiceStepAction;delete:DeleteServiceStepAction"),
			beego.NSRouter("/services/reconfig",
				&controller.ServiceConfigController{},
				"get:GetConfigServiceFromDBAction"),
			beego.NSRouter("/services/:id([0-9]+)/status",
				&controller.ServiceController{},
				"get:GetServiceStatusAction"),
			beego.NSRouter("/services/selectservices",
				&controller.ServiceController{},
				"get:GetSelectableServicesAction"),
			beego.NSRouter("/services/yaml/upload",
				&controller.ServiceController{},
				"post:UploadYamlFileAction"),
			beego.NSRouter("/services/yaml/download",
				&controller.ServiceController{},
				"get:DownloadDeploymentYamlFileAction"),
			beego.NSRouter("/images/dockerfile/upload",
				&controller.ImageController{},
				"post:UploadDockerfileFileAction"),
			beego.NSRouter("/images/dockerfile/download",
				&controller.ImageController{},
				"get:DownloadDockerfileFileAction"),
			beego.NSRouter("/services/:id([0-9]+)/info",
				&controller.ServiceController{},
				"get:GetServiceInfoAction"),
			beego.NSRouter("/services/info",
				&controller.ServiceController{},
				"post:StoreServiceRoute"),
			beego.NSRouter("/services/:id([0-9]+)/test",
				&controller.ServiceController{},
				"post:DeployServiceTestAction"),
			beego.NSRouter("/services/:id([0-9]+)/toggle",
				&controller.ServiceController{},
				"put:ToggleServiceAction"),
			beego.NSRouter("/services/:id([0-9]+)/scale",
				&controller.ServiceController{},
				"put:ScaleServiceAction;get:GetScaleStatusAction"),
			beego.NSRouter("/services/:id([0-9]+)/publicity",
				&controller.ServiceController{},
				"put:ServicePublicityAction"),
			beego.NSRouter("/files/upload",
				&controller.FileUploadController{},
				"post:Upload"),
			beego.NSRouter("/files/download",
				&controller.FileUploadController{},
				"head:DownloadProbe;get:Download"),
			beego.NSRouter("/files/list",
				&controller.FileUploadController{},
				"post:ListFiles"),
			beego.NSRouter("/files/remove",
				&controller.FileUploadController{},
				"post:RemoveFile"),
			beego.NSRouter("/jenkins-job/:userID([0-9]+)/:buildNumber([0-9]+)",
				&controller.JenkinsJobCallbackController{},
				"get:BuildNumberCallback"),
			beego.NSRouter("/jenkins-job/console",
				&controller.JenkinsJobController{},
				"get:Console"),
			beego.NSRouter("/jenkins-job/stop",
				&controller.JenkinsJobController{},
				"get:Stop"),
		),
	)

	beego.AddNamespace(ns)
	beego.Router("/deploy/:owner_name/:project_name/:service_name", &controller.ServiceShowController{})
	beego.SetStaticPath("/swagger", "swagger")
}
